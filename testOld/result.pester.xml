<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="200" errors="0" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2020-11-19" time="11:50:04">
  <environment nunit-version="2.5.8.0" cwd="/mnt/c/Users/annavied/Documents/PowerShellGet/test" user="annavied" clr-version="Unknown" os-version="4.19.128-microsoft-standard" platform="Linux" user-domain="" machine-name="DESKTOP-PS97LE4" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="TestFixture" name="Pester" executed="True" result="Success" success="True" time="168.8694" asserts="0" description="Pester">
    <results>
      <test-suite type="TestFixture" name="/mnt/c/Users/annavied/Documents/PowerShellGet/test/FindResource.Command.Tests.ps1" executed="True" result="Success" success="True" time="34.4524" asserts="0" description="/mnt/c/Users/annavied/Documents/PowerShellGet/test/FindResource.Command.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Test Find-PSResource for Command" executed="True" result="Success" success="True" time="34.2167" asserts="0" description="Test Find-PSResource for Command">
            <results>
              <test-case description="find Command resource given Name parameter" name="Test Find-PSResource for Command.find Command resource given Name parameter" time="1.4346" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resources when given Name, Version not null --&gt; '*'" name="Test Find-PSResource for Command.find resources when given Name, Version not null --&gt; '*'" time="0.4033" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resources when given ModuleName, Version not null --&gt; '*'" name="Test Find-PSResource for Command.find resources when given ModuleName, Version not null --&gt; '*'" time="0.3117" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find Command resource given ModuleName with Version null or empty" name="Test Find-PSResource for Command.find Command resource given ModuleName with Version null or empty" time="0.486" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find Command resource with latest version (including preview versions), with Prerelease parameter" name="Test Find-PSResource for Command.find Command resource with latest version (including preview versions), with Prerelease parameter" time="0.6773" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resource with single tag, given Tags parameter" name="Test Find-PSResource for Command.find resource with single tag, given Tags parameter" time="8.2928" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resource with multiple tags, given Tags parameter" name="Test Find-PSResource for Command.find resource with multiple tags, given Tags parameter" time="7.7055" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="not find resource given Repository parameter where resource does not exist" name="Test Find-PSResource for Command.not find resource given Repository parameter where resource does not exist" time="1.1217" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resource given repository parameter where resource does exist" name="Test Find-PSResource for Command.find resource given repository parameter where resource does exist" time="0.4214" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resource in local repository given Repository parameter" name="Test Find-PSResource for Command.find resource in local repository given Repository parameter" time="0.301" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find Resource given repository parameter, where resource exists in multiple LOCAL repos" name="Test Find-PSResource for Command.find Resource given repository parameter, where resource exists in multiple LOCAL repos" time="0.5744" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resource with IncludeDependencies parameter" name="Test Find-PSResource for Command.find resource with IncludeDependencies parameter" time="1.1147" asserts="0" success="True" result="Success" executed="True" />
              <test-suite type="ParameterizedTest" name="Test Find-PSResource for Command.find Command resource given ModuleName to &lt;Reason&gt;" executed="True" result="Success" success="True" time="3.129" asserts="0" description="find Command resource given ModuleName to &lt;Reason&gt;">
                <results>
                  <test-case description="find Command resource given ModuleName to validate version, exact match" name="Test Find-PSResource for Command.find Command resource given ModuleName to validate version, exact match" time="0.4712" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find Command resource given ModuleName to validate version, exact match without bracket syntax" name="Test Find-PSResource for Command.find Command resource given ModuleName to validate version, exact match without bracket syntax" time="0.3806" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find Command resource given ModuleName to validate version, exact range inclusive" name="Test Find-PSResource for Command.find Command resource given ModuleName to validate version, exact range inclusive" time="0.3359" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find Command resource given ModuleName to validate version, exact range exclusive" name="Test Find-PSResource for Command.find Command resource given ModuleName to validate version, exact range exclusive" time="0.2804" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find Command resource given ModuleName to validate version, minimum version inclusive" name="Test Find-PSResource for Command.find Command resource given ModuleName to validate version, minimum version inclusive" time="0.3272" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find Command resource given ModuleName to validate version, minimum version exclusive" name="Test Find-PSResource for Command.find Command resource given ModuleName to validate version, minimum version exclusive" time="0.3779" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find Command resource given ModuleName to validate version, maximum version exclusive" name="Test Find-PSResource for Command.find Command resource given ModuleName to validate version, maximum version exclusive" time="0.3293" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find Command resource given ModuleName to validate version, maximum version inclusive" name="Test Find-PSResource for Command.find Command resource given ModuleName to validate version, maximum version inclusive" time="0.2881" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find Command resource given ModuleName to validate version, mixed inclusive minimum and exclusive maximum version" name="Test Find-PSResource for Command.find Command resource given ModuleName to validate version, mixed inclusive minimum and exclusive maximum version" time="0.3383" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Test Find-PSResource for Command.find Command resource given Name to &lt;Reason&gt;" executed="True" result="Success" success="True" time="2.9861" asserts="0" description="find Command resource given Name to &lt;Reason&gt;">
                <results>
                  <test-case description="find Command resource given Name to validate version, exact match" name="Test Find-PSResource for Command.find Command resource given Name to validate version, exact match" time="0.3088" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find Command resource given Name to validate version, exact match without bracket syntax" name="Test Find-PSResource for Command.find Command resource given Name to validate version, exact match without bracket syntax" time="0.3662" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find Command resource given Name to validate version, exact range inclusive" name="Test Find-PSResource for Command.find Command resource given Name to validate version, exact range inclusive" time="0.3863" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find Command resource given Name to validate version, exact range exclusive" name="Test Find-PSResource for Command.find Command resource given Name to validate version, exact range exclusive" time="0.3511" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find Command resource given Name to validate version, minimum version inclusive" name="Test Find-PSResource for Command.find Command resource given Name to validate version, minimum version inclusive" time="0.34" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find Command resource given Name to validate version, minimum version exclusive" name="Test Find-PSResource for Command.find Command resource given Name to validate version, minimum version exclusive" time="0.3404" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find Command resource given Name to validate version, maximum version exclusive" name="Test Find-PSResource for Command.find Command resource given Name to validate version, maximum version exclusive" time="0.3016" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find Command resource given Name to validate version, maximum version inclusive" name="Test Find-PSResource for Command.find Command resource given Name to validate version, maximum version inclusive" time="0.2722" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find Command resource given Name to validate version, mixed inclusive minimum and exclusive maximum version" name="Test Find-PSResource for Command.find Command resource given Name to validate version, mixed inclusive minimum and exclusive maximum version" time="0.3195" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Test Find-PSResource for Command.not find resource and throw exception with incorrectly formatted version such as &lt;Description&gt;" executed="True" result="Success" success="True" time="3.5608" asserts="0" description="not find resource and throw exception with incorrectly formatted version such as &lt;Description&gt;">
                <results>
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with wilcard in middle" name="Test Find-PSResource for Command.not find resource and throw exception with incorrectly formatted version such as version with wilcard in middle" time="0.5444" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with wilcard at start" name="Test Find-PSResource for Command.not find resource and throw exception with incorrectly formatted version such as version with wilcard at start" time="0.3287" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with wildcard at second digit" name="Test Find-PSResource for Command.not find resource and throw exception with incorrectly formatted version such as version with wildcard at second digit" time="0.4336" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with wildcard at third digit" name="Test Find-PSResource for Command.not find resource and throw exception with incorrectly formatted version such as version with wildcard at third digit" time="0.4401" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with wildcard at end" name="Test Find-PSResource for Command.not find resource and throw exception with incorrectly formatted version such as version with wildcard at end" time="0.5682" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with missing digit in middle" name="Test Find-PSResource for Command.not find resource and throw exception with incorrectly formatted version such as version with missing digit in middle" time="0.5019" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with missing digit at end" name="Test Find-PSResource for Command.not find resource and throw exception with incorrectly formatted version such as version with missing digit at end" time="0.3991" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with more than 4 digits" name="Test Find-PSResource for Command.not find resource and throw exception with incorrectly formatted version such as version with more than 4 digits" time="0.3448" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Test Find-PSResource for Command.not find resource with incorrectly formatted version such as &lt;Description&gt;" executed="True" result="Success" success="True" time="0.593" asserts="0" description="not find resource with incorrectly formatted version such as &lt;Description&gt;">
                <results>
                  <test-case description="not find resource with incorrectly formatted version such as exclusive version (2.5.0.0)" name="Test Find-PSResource for Command.not find resource with incorrectly formatted version such as exclusive version (2.5.0.0)" time="0.3034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource with incorrectly formatted version such as version formatted with invalid delimiter" name="Test Find-PSResource for Command.not find resource with incorrectly formatted version such as version formatted with invalid delimiter" time="0.2896" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/mnt/c/Users/annavied/Documents/PowerShellGet/test/FindResource.DSCResource.Tests.ps1" executed="True" result="Success" success="True" time="27.8751" asserts="0" description="/mnt/c/Users/annavied/Documents/PowerShellGet/test/FindResource.DSCResource.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Test Find-PSResource for DSC Resource" executed="True" result="Success" success="True" time="27.7973" asserts="0" description="Test Find-PSResource for DSC Resource">
            <results>
              <test-case description="find a DSCResource resource given Name parameter" name="Test Find-PSResource for DSC Resource.find a DSCResource resource given Name parameter" time="0.4022" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resources when given Name, Version not null --&gt; '*' " name="Test Find-PSResource for DSC Resource.find resources when given Name, Version not null --&gt; '*' " time="0.3216" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resources when given ModuleName, Version not null --&gt; '*' " name="Test Find-PSResource for DSC Resource.find resources when given ModuleName, Version not null --&gt; '*' " time="0.3844" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resource when given ModuleName, Version param null" name="Test Find-PSResource for DSC Resource.find resource when given ModuleName, Version param null" time="0.4173" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resource with latest version (including preview versions), with Prerelease parameter" name="Test Find-PSResource for DSC Resource.find resource with latest version (including preview versions), with Prerelease parameter" time="0.6329" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find a DSCResource with specific tag, given Tags parameter" name="Test Find-PSResource for DSC Resource.find a DSCResource with specific tag, given Tags parameter" time="3.5309" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find a DSCResource with specific tag, given Tags parameter" name="Test Find-PSResource for DSC Resource.find a DSCResource with specific tag, given Tags parameter" time="7.8626" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="not find DSCResource from repository, given Repository parameter" name="Test Find-PSResource for DSC Resource.not find DSCResource from repository, given Repository parameter" time="0.6641" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find DSCResource from repository, given Repository parameter" name="Test Find-PSResource for DSC Resource.find DSCResource from repository, given Repository parameter" time="0.4107" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resource in local repository given Repository parameter" name="Test Find-PSResource for DSC Resource.find resource in local repository given Repository parameter" time="0.0643" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find Resource given repository parameter, where resource exists in multiple LOCAL repos" name="Test Find-PSResource for DSC Resource.find Resource given repository parameter, where resource exists in multiple LOCAL repos" time="0.525" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find DSCResource resource with preview version, with Prerelease parameter" name="Test Find-PSResource for DSC Resource.find DSCResource resource with preview version, with Prerelease parameter" time="0.5743" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resource with IncludeDependencies parameter" name="Test Find-PSResource for DSC Resource.find resource with IncludeDependencies parameter" time="0.3894" asserts="0" success="True" result="Success" executed="True" />
              <test-suite type="ParameterizedTest" name="Test Find-PSResource for DSC Resource.find DSC resource when given ModuleName to &lt;Reason&gt;" executed="True" result="Success" success="True" time="3.0886" asserts="0" description="find DSC resource when given ModuleName to &lt;Reason&gt;">
                <results>
                  <test-case description="find DSC resource when given ModuleName to validate version, exact match" name="Test Find-PSResource for DSC Resource.find DSC resource when given ModuleName to validate version, exact match" time="0.4386" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find DSC resource when given ModuleName to validate version, exact match without bracket syntax" name="Test Find-PSResource for DSC Resource.find DSC resource when given ModuleName to validate version, exact match without bracket syntax" time="0.3339" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find DSC resource when given ModuleName to validate version, exact range inclusive" name="Test Find-PSResource for DSC Resource.find DSC resource when given ModuleName to validate version, exact range inclusive" time="0.3759" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find DSC resource when given ModuleName to validate version, exact range exclusive" name="Test Find-PSResource for DSC Resource.find DSC resource when given ModuleName to validate version, exact range exclusive" time="0.3084" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find DSC resource when given ModuleName to validate version, minimum version exclusive" name="Test Find-PSResource for DSC Resource.find DSC resource when given ModuleName to validate version, minimum version exclusive" time="0.3338" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find DSC resource when given ModuleName to validate version, minimum version inclusive" name="Test Find-PSResource for DSC Resource.find DSC resource when given ModuleName to validate version, minimum version inclusive" time="0.3112" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find DSC resource when given ModuleName to validate version, maximum version exclusive" name="Test Find-PSResource for DSC Resource.find DSC resource when given ModuleName to validate version, maximum version exclusive" time="0.3173" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find DSC resource when given ModuleName to validate version, maximum version inclusive" name="Test Find-PSResource for DSC Resource.find DSC resource when given ModuleName to validate version, maximum version inclusive" time="0.3249" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find DSC resource when given ModuleName to validate version, mixed inclusive minimum and exclusive maximum version" name="Test Find-PSResource for DSC Resource.find DSC resource when given ModuleName to validate version, mixed inclusive minimum and exclusive maximum version" time="0.3446" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Test Find-PSResource for DSC Resource.find DSC resource when given Name to &lt;Reason&gt;" executed="True" result="Success" success="True" time="3.1662" asserts="0" description="find DSC resource when given Name to &lt;Reason&gt;">
                <results>
                  <test-case description="find DSC resource when given Name to validate version, exact match" name="Test Find-PSResource for DSC Resource.find DSC resource when given Name to validate version, exact match" time="0.3219" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find DSC resource when given Name to validate version, exact match without bracket syntax" name="Test Find-PSResource for DSC Resource.find DSC resource when given Name to validate version, exact match without bracket syntax" time="0.4101" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find DSC resource when given Name to validate version, exact range inclusive" name="Test Find-PSResource for DSC Resource.find DSC resource when given Name to validate version, exact range inclusive" time="0.3431" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find DSC resource when given Name to validate version, exact range exclusive" name="Test Find-PSResource for DSC Resource.find DSC resource when given Name to validate version, exact range exclusive" time="0.3556" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find DSC resource when given Name to validate version, minimum version exclusive" name="Test Find-PSResource for DSC Resource.find DSC resource when given Name to validate version, minimum version exclusive" time="0.3345" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find DSC resource when given Name to validate version, minimum version inclusive" name="Test Find-PSResource for DSC Resource.find DSC resource when given Name to validate version, minimum version inclusive" time="0.3699" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find DSC resource when given Name to validate version, maximum version exclusive" name="Test Find-PSResource for DSC Resource.find DSC resource when given Name to validate version, maximum version exclusive" time="0.3661" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find DSC resource when given Name to validate version, maximum version inclusive" name="Test Find-PSResource for DSC Resource.find DSC resource when given Name to validate version, maximum version inclusive" time="0.317" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find DSC resource when given Name to validate version, mixed inclusive minimum and exclusive maximum version" name="Test Find-PSResource for DSC Resource.find DSC resource when given Name to validate version, mixed inclusive minimum and exclusive maximum version" time="0.348" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Test Find-PSResource for DSC Resource.not find resource and throw exception with incorrectly formatted version such as &lt;Description&gt;" executed="True" result="Success" success="True" time="4.1289" asserts="0" description="not find resource and throw exception with incorrectly formatted version such as &lt;Description&gt;">
                <results>
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with wilcard in middle" name="Test Find-PSResource for DSC Resource.not find resource and throw exception with incorrectly formatted version such as version with wilcard in middle" time="0.3278" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with wilcard at start" name="Test Find-PSResource for DSC Resource.not find resource and throw exception with incorrectly formatted version such as version with wilcard at start" time="0.3374" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with wildcard at second digit" name="Test Find-PSResource for DSC Resource.not find resource and throw exception with incorrectly formatted version such as version with wildcard at second digit" time="0.36" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with wildcard at third digit" name="Test Find-PSResource for DSC Resource.not find resource and throw exception with incorrectly formatted version such as version with wildcard at third digit" time="0.6825" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with wildcard at end" name="Test Find-PSResource for DSC Resource.not find resource and throw exception with incorrectly formatted version such as version with wildcard at end" time="0.7278" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with missing digit in middle" name="Test Find-PSResource for DSC Resource.not find resource and throw exception with incorrectly formatted version such as version with missing digit in middle" time="0.6873" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with missing digit at end" name="Test Find-PSResource for DSC Resource.not find resource and throw exception with incorrectly formatted version such as version with missing digit at end" time="0.4857" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with more than 4 digits" name="Test Find-PSResource for DSC Resource.not find resource and throw exception with incorrectly formatted version such as version with more than 4 digits" time="0.5205" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Test Find-PSResource for DSC Resource.not find resource with incorrectly formatted version such as &lt;Description&gt;" executed="True" result="Success" success="True" time="0.6426" asserts="0" description="not find resource with incorrectly formatted version such as &lt;Description&gt;">
                <results>
                  <test-case description="not find resource with incorrectly formatted version such as exclusive version (2.5.0.0)" name="Test Find-PSResource for DSC Resource.not find resource with incorrectly formatted version such as exclusive version (2.5.0.0)" time="0.341" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource with incorrectly formatted version such as version formatted with invalid delimiter" name="Test Find-PSResource for DSC Resource.not find resource with incorrectly formatted version such as version formatted with invalid delimiter" time="0.3016" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/mnt/c/Users/annavied/Documents/PowerShellGet/test/FindResource.Module.Tests.ps1" executed="True" result="Success" success="True" time="46.7557" asserts="0" description="/mnt/c/Users/annavied/Documents/PowerShellGet/test/FindResource.Module.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Test Find-PSResource for Module" executed="True" result="Success" success="True" time="46.6593" asserts="0" description="Test Find-PSResource for Module">
            <results>
              <test-case description="find Specific Module Resource by Name" name="Test Find-PSResource for Module.find Specific Module Resource by Name" time="0.3908" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="should not find resource given nonexistant name" name="Test Find-PSResource for Module.should not find resource given nonexistant name" time="1.1204" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resources when given Name, Version not null --&gt; '*'" name="Test Find-PSResource for Module.find resources when given Name, Version not null --&gt; '*'" time="0.3386" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resources when given ModuleName, Version not null --&gt; '*'" name="Test Find-PSResource for Module.find resources when given ModuleName, Version not null --&gt; '*'" time="0.3439" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resource when given ModuleName, Version param null" name="Test Find-PSResource for Module.find resource when given ModuleName, Version param null" time="0.3259" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resource with latest (including prerelease) version given Prerelease parameter" name="Test Find-PSResource for Module.find resource with latest (including prerelease) version given Prerelease parameter" time="0.6317" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find a resource given Tags parameter with one value" name="Test Find-PSResource for Module.find a resource given Tags parameter with one value" time="11.4093" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find a resource given tags parameter with multiple values" name="Test Find-PSResource for Module.find a resource given tags parameter with multiple values" time="17.6717" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="not find resource given repository parameter where resource does not exist" name="Test Find-PSResource for Module.not find resource given repository parameter where resource does not exist" time="0.7279" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resource given repository parameter where resource does exist" name="Test Find-PSResource for Module.find resource given repository parameter where resource does exist" time="0.6033" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resource in local repository given Repository parameter" name="Test Find-PSResource for Module.find resource in local repository given Repository parameter" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find Resource given repository parameter, where resource exists in multiple LOCAL repos" name="Test Find-PSResource for Module.find Resource given repository parameter, where resource exists in multiple LOCAL repos" time="0.8214" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resource with IncludeDependencies parameter" name="Test Find-PSResource for Module.find resource with IncludeDependencies parameter" time="0.3267" asserts="0" success="True" result="Success" executed="True" />
              <test-suite type="ParameterizedTest" name="Test Find-PSResource for Module.find resource when given ModuleName to &lt;Reason&gt;" executed="True" result="Success" success="True" time="3.6724" asserts="0" description="find resource when given ModuleName to &lt;Reason&gt;">
                <results>
                  <test-case description="find resource when given ModuleName to validate version, exact match" name="Test Find-PSResource for Module.find resource when given ModuleName to validate version, exact match" time="0.3346" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given ModuleName to validate version, exact match without bracket syntax" name="Test Find-PSResource for Module.find resource when given ModuleName to validate version, exact match without bracket syntax" time="0.297" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given ModuleName to validate version, exact range inclusive" name="Test Find-PSResource for Module.find resource when given ModuleName to validate version, exact range inclusive" time="0.3215" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given ModuleName to validate version, exact range exclusive" name="Test Find-PSResource for Module.find resource when given ModuleName to validate version, exact range exclusive" time="0.3253" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given ModuleName to validate version, minimum version exclusive" name="Test Find-PSResource for Module.find resource when given ModuleName to validate version, minimum version exclusive" time="1.0157" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given ModuleName to validate version, minimum version inclusive" name="Test Find-PSResource for Module.find resource when given ModuleName to validate version, minimum version inclusive" time="0.3072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given ModuleName to validate version, maximum version exclusive" name="Test Find-PSResource for Module.find resource when given ModuleName to validate version, maximum version exclusive" time="0.4598" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given ModuleName to validate version, maximum version inclusive" name="Test Find-PSResource for Module.find resource when given ModuleName to validate version, maximum version inclusive" time="0.2861" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given ModuleName to validate version, mixed inclusive minimum and exclusive maximum version" name="Test Find-PSResource for Module.find resource when given ModuleName to validate version, mixed inclusive minimum and exclusive maximum version" time="0.3251" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Test Find-PSResource for Module.find resource when given Name to &lt;Reason&gt; &lt;Version&gt;" executed="True" result="Success" success="True" time="4.0842" asserts="0" description="find resource when given Name to &lt;Reason&gt; &lt;Version&gt;">
                <results>
                  <test-case description="find resource when given Name to validate version, exact match [2.0.0.0]" name="Test Find-PSResource for Module.find resource when given Name to validate version, exact match [2.0.0.0]" time="0.3649" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, exact match without bracket syntax 2.0.0.0" name="Test Find-PSResource for Module.find resource when given Name to validate version, exact match without bracket syntax 2.0.0.0" time="0.434" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, exact range inclusive [1.2.0.0, 5.0.0.0]" name="Test Find-PSResource for Module.find resource when given Name to validate version, exact range inclusive [1.2.0.0, 5.0.0.0]" time="0.377" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, exact range exclusive (1.2.0.0, 5.0.0.0)" name="Test Find-PSResource for Module.find resource when given Name to validate version, exact range exclusive (1.2.0.0, 5.0.0.0)" time="0.3547" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, minimum version exclusive (1.2.0.0,)" name="Test Find-PSResource for Module.find resource when given Name to validate version, minimum version exclusive (1.2.0.0,)" time="0.3365" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, minimum version inclusive [1.2.0.0,)" name="Test Find-PSResource for Module.find resource when given Name to validate version, minimum version inclusive [1.2.0.0,)" time="1.3374" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, maximum version exclusive (,5.0.0.0)" name="Test Find-PSResource for Module.find resource when given Name to validate version, maximum version exclusive (,5.0.0.0)" time="0.3006" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, maximum version inclusive (,5.0.0.0]" name="Test Find-PSResource for Module.find resource when given Name to validate version, maximum version inclusive (,5.0.0.0]" time="0.3175" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, mixed inclusive minimum and exclusive maximum version [1.2.0.0, 5.0.0.0)" name="Test Find-PSResource for Module.find resource when given Name to validate version, mixed inclusive minimum and exclusive maximum version [1.2.0.0, 5.0.0.0)" time="0.2615" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Test Find-PSResource for Module.not find resource and throw exception with incorrectly formatted version such as &lt;Description&gt;" executed="True" result="Success" success="True" time="2.8006" asserts="0" description="not find resource and throw exception with incorrectly formatted version such as &lt;Description&gt;">
                <results>
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with wilcard in middle" name="Test Find-PSResource for Module.not find resource and throw exception with incorrectly formatted version such as version with wilcard in middle" time="0.3326" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with wilcard at start" name="Test Find-PSResource for Module.not find resource and throw exception with incorrectly formatted version such as version with wilcard at start" time="0.3172" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with wildcard at second digit" name="Test Find-PSResource for Module.not find resource and throw exception with incorrectly formatted version such as version with wildcard at second digit" time="0.2739" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with wildcard at third digit" name="Test Find-PSResource for Module.not find resource and throw exception with incorrectly formatted version such as version with wildcard at third digit" time="0.4153" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with wildcard at end" name="Test Find-PSResource for Module.not find resource and throw exception with incorrectly formatted version such as version with wildcard at end" time="0.3616" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with missing digit in middle" name="Test Find-PSResource for Module.not find resource and throw exception with incorrectly formatted version such as version with missing digit in middle" time="0.3082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with missing digit at end" name="Test Find-PSResource for Module.not find resource and throw exception with incorrectly formatted version such as version with missing digit at end" time="0.3567" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with more than 4 digits" name="Test Find-PSResource for Module.not find resource and throw exception with incorrectly formatted version such as version with more than 4 digits" time="0.4352" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Test Find-PSResource for Module.not find resource with incorrectly formatted version such as &lt;Description&gt;" executed="True" result="Success" success="True" time="0.7273" asserts="0" description="not find resource with incorrectly formatted version such as &lt;Description&gt;">
                <results>
                  <test-case description="not find resource with incorrectly formatted version such as exclusive version (1.5.0.0)" name="Test Find-PSResource for Module.not find resource with incorrectly formatted version such as exclusive version (1.5.0.0)" time="0.298" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource with incorrectly formatted version such as version formatted with invalid delimiter" name="Test Find-PSResource for Module.not find resource with incorrectly formatted version such as version formatted with invalid delimiter" time="0.4293" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/mnt/c/Users/annavied/Documents/PowerShellGet/test/FindResource.RoleCapability.Tests.ps1" executed="True" result="Success" success="True" time="43.611" asserts="0" description="/mnt/c/Users/annavied/Documents/PowerShellGet/test/FindResource.RoleCapability.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Test Find-PSResource for Role Capability" executed="True" result="Success" success="True" time="43.5248" asserts="0" description="Test Find-PSResource for Role Capability">
            <results>
              <test-case description="find Role Capability resource, given Name parameter" name="Test Find-PSResource for Role Capability.find Role Capability resource, given Name parameter" time="0.41" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resources when given Name, Version not null --&gt; '*'" name="Test Find-PSResource for Role Capability.find resources when given Name, Version not null --&gt; '*'" time="0.2798" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resources when given Name, Version not null --&gt; '*'" name="Test Find-PSResource for Role Capability.find resources when given Name, Version not null --&gt; '*'" time="0.3046" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resource given ModuleName with Version null or empty" name="Test Find-PSResource for Role Capability.find resource given ModuleName with Version null or empty" time="0.3346" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resource with latest version (including preview versions), with Prerelease parameter" name="Test Find-PSResource for Role Capability.find resource with latest version (including preview versions), with Prerelease parameter" time="0.6355" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find Role Capability resource with given Tags parameter" name="Test Find-PSResource for Role Capability.find Role Capability resource with given Tags parameter" time="3.8063" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find Role Capability resource with given Tags parameter" name="Test Find-PSResource for Role Capability.find Role Capability resource with given Tags parameter" time="25.3543" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="not find Role Capability resource that doesn't exist in specified repository, given Repository parameter" name="Test Find-PSResource for Role Capability.not find Role Capability resource that doesn't exist in specified repository, given Repository parameter" time="0.9222" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resource that exists only in a specific repository, given Repository parameter" name="Test Find-PSResource for Role Capability.find resource that exists only in a specific repository, given Repository parameter" time="0.5552" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resource in local repository given Repository parameter" name="Test Find-PSResource for Role Capability.find resource in local repository given Repository parameter" time="0.0695" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find Resource given repository parameter, where resource exists in multiple LOCAL repos" name="Test Find-PSResource for Role Capability.find Resource given repository parameter, where resource exists in multiple LOCAL repos" time="0.4184" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resource with IncludeDependencies parameter" name="Test Find-PSResource for Role Capability.find resource with IncludeDependencies parameter" time="0.3212" asserts="0" success="True" result="Success" executed="True" />
              <test-suite type="ParameterizedTest" name="Test Find-PSResource for Role Capability.find resource when given Name to &lt;Reason&gt;" executed="True" result="Success" success="True" time="6.224" asserts="0" description="find resource when given Name to &lt;Reason&gt;">
                <results>
                  <test-case description="find resource when given Name to validate version, exact match" name="Test Find-PSResource for Role Capability.find resource when given Name to validate version, exact match" time="0.335" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, exact match without bracket syntax" name="Test Find-PSResource for Role Capability.find resource when given Name to validate version, exact match without bracket syntax" time="0.3259" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, exact range inclusive" name="Test Find-PSResource for Role Capability.find resource when given Name to validate version, exact range inclusive" time="0.3807" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, exact range exclusive" name="Test Find-PSResource for Role Capability.find resource when given Name to validate version, exact range exclusive" time="0.3186" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, minimum version exclusive" name="Test Find-PSResource for Role Capability.find resource when given Name to validate version, minimum version exclusive" time="0.3378" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, minimum version inclusive" name="Test Find-PSResource for Role Capability.find resource when given Name to validate version, minimum version inclusive" time="0.3482" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, maximum version exclusive" name="Test Find-PSResource for Role Capability.find resource when given Name to validate version, maximum version exclusive" time="0.5488" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, maximum version inclusive" name="Test Find-PSResource for Role Capability.find resource when given Name to validate version, maximum version inclusive" time="0.3175" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, mixed inclusive minimum and exclusive maximum version" name="Test Find-PSResource for Role Capability.find resource when given Name to validate version, mixed inclusive minimum and exclusive maximum version" time="0.3967" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, exact match" name="Test Find-PSResource for Role Capability.find resource when given Name to validate version, exact match" time="0.4486" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, exact match without bracket syntax" name="Test Find-PSResource for Role Capability.find resource when given Name to validate version, exact match without bracket syntax" time="0.2837" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, exact range inclusive" name="Test Find-PSResource for Role Capability.find resource when given Name to validate version, exact range inclusive" time="0.3064" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, exact range exclusive" name="Test Find-PSResource for Role Capability.find resource when given Name to validate version, exact range exclusive" time="0.3165" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, minimum version exclusive" name="Test Find-PSResource for Role Capability.find resource when given Name to validate version, minimum version exclusive" time="0.2934" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, minimum version inclusive" name="Test Find-PSResource for Role Capability.find resource when given Name to validate version, minimum version inclusive" time="0.3355" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, maximum version exclusive" name="Test Find-PSResource for Role Capability.find resource when given Name to validate version, maximum version exclusive" time="0.314" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, maximum version inclusive" name="Test Find-PSResource for Role Capability.find resource when given Name to validate version, maximum version inclusive" time="0.2862" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, mixed inclusive minimum and exclusive maximum version" name="Test Find-PSResource for Role Capability.find resource when given Name to validate version, mixed inclusive minimum and exclusive maximum version" time="0.3305" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Test Find-PSResource for Role Capability.not find resource and throw exception with incorrectly formatted version such as &lt;Description&gt;" executed="True" result="Success" success="True" time="2.6771" asserts="0" description="not find resource and throw exception with incorrectly formatted version such as &lt;Description&gt;">
                <results>
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with wilcard in middle" name="Test Find-PSResource for Role Capability.not find resource and throw exception with incorrectly formatted version such as version with wilcard in middle" time="0.3858" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with wilcard at start" name="Test Find-PSResource for Role Capability.not find resource and throw exception with incorrectly formatted version such as version with wilcard at start" time="0.294" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with wildcard at second digit" name="Test Find-PSResource for Role Capability.not find resource and throw exception with incorrectly formatted version such as version with wildcard at second digit" time="0.3706" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with wildcard at third digit" name="Test Find-PSResource for Role Capability.not find resource and throw exception with incorrectly formatted version such as version with wildcard at third digit" time="0.3108" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with wildcard at end" name="Test Find-PSResource for Role Capability.not find resource and throw exception with incorrectly formatted version such as version with wildcard at end" time="0.2916" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with missing digit in middle" name="Test Find-PSResource for Role Capability.not find resource and throw exception with incorrectly formatted version such as version with missing digit in middle" time="0.3653" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with missing digit at end" name="Test Find-PSResource for Role Capability.not find resource and throw exception with incorrectly formatted version such as version with missing digit at end" time="0.3278" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with more than 4 digits" name="Test Find-PSResource for Role Capability.not find resource and throw exception with incorrectly formatted version such as version with more than 4 digits" time="0.3313" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Test Find-PSResource for Role Capability.not find resource with incorrectly formatted version such as &lt;Description&gt;" executed="True" result="Success" success="True" time="0.6556" asserts="0" description="not find resource with incorrectly formatted version such as &lt;Description&gt;">
                <results>
                  <test-case description="not find resource with incorrectly formatted version such as exclusive version (2.5.0.0)" name="Test Find-PSResource for Role Capability.not find resource with incorrectly formatted version such as exclusive version (2.5.0.0)" time="0.3641" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource with incorrectly formatted version such as version formatted with invalid delimiter" name="Test Find-PSResource for Role Capability.not find resource with incorrectly formatted version such as version formatted with invalid delimiter" time="0.2915" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/mnt/c/Users/annavied/Documents/PowerShellGet/test/FindResource.Script.Tests.ps1" executed="True" result="Success" success="True" time="16.0487" asserts="0" description="/mnt/c/Users/annavied/Documents/PowerShellGet/test/FindResource.Script.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Test Find-PSResource for Script" executed="True" result="Success" success="True" time="15.9578" asserts="0" description="Test Find-PSResource for Script">
            <results>
              <test-case description="find resource given Name parameter" name="Test Find-PSResource for Script.find resource given Name parameter" time="0.6326" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resources when given Name, Version not null --&gt; '*'" name="Test Find-PSResource for Script.find resources when given Name, Version not null --&gt; '*'" time="0.2732" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="not find script resource when given ModuleName" name="Test Find-PSResource for Script.not find script resource when given ModuleName" time="0.2724" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="not find script resource with specified ModuleName and range Version parameter -&gt; '*' " name="Test Find-PSResource for Script.not find script resource with specified ModuleName and range Version parameter -&gt; '*' " time="0.3251" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resource with latest (including prerelease) version given Prerelease parameter" name="Test Find-PSResource for Script.find resource with latest (including prerelease) version given Prerelease parameter" time="0.5976" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="not find resource given Repository parameter where resource does not exist" name="Test Find-PSResource for Script.not find resource given Repository parameter where resource does not exist" time="0.6022" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resource given repository parameter where resource does exist" name="Test Find-PSResource for Script.find resource given repository parameter where resource does exist" time="0.3913" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resource in local repository given Repository parameter" name="Test Find-PSResource for Script.find resource in local repository given Repository parameter" time="0.0717" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find Resource given repository parameter, where resource exists in multiple LOCAL repos" name="Test Find-PSResource for Script.find Resource given repository parameter, where resource exists in multiple LOCAL repos" time="1.3657" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="find resource with IncludeDependencies parameter" name="Test Find-PSResource for Script.find resource with IncludeDependencies parameter" time="0.7565" asserts="0" success="True" result="Success" executed="True" />
              <test-suite type="ParameterizedTest" name="Test Find-PSResource for Script.find resource when given Name to &lt;Reason&gt;" executed="True" result="Success" success="True" time="2.8347" asserts="0" description="find resource when given Name to &lt;Reason&gt;">
                <results>
                  <test-case description="find resource when given Name to validate version, exact match" name="Test Find-PSResource for Script.find resource when given Name to validate version, exact match" time="0.3234" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, exact match without bracket syntax" name="Test Find-PSResource for Script.find resource when given Name to validate version, exact match without bracket syntax" time="0.3201" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, exact range inclusive" name="Test Find-PSResource for Script.find resource when given Name to validate version, exact range inclusive" time="0.3478" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, exact range exclusive" name="Test Find-PSResource for Script.find resource when given Name to validate version, exact range exclusive" time="0.2905" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, minimum version exclusive" name="Test Find-PSResource for Script.find resource when given Name to validate version, minimum version exclusive" time="0.2746" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, minimum version inclusive" name="Test Find-PSResource for Script.find resource when given Name to validate version, minimum version inclusive" time="0.2852" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, maximum version exclusive" name="Test Find-PSResource for Script.find resource when given Name to validate version, maximum version exclusive" time="0.2983" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, maximum version inclusive" name="Test Find-PSResource for Script.find resource when given Name to validate version, maximum version inclusive" time="0.3133" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="find resource when given Name to validate version, mixed inclusive minimum and exclusive maximum version" name="Test Find-PSResource for Script.find resource when given Name to validate version, mixed inclusive minimum and exclusive maximum version" time="0.3813" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Test Find-PSResource for Script.not find resource and throw exception with incorrectly formatted version such as &lt;Description&gt;" executed="True" result="Success" success="True" time="3.111" asserts="0" description="not find resource and throw exception with incorrectly formatted version such as &lt;Description&gt;">
                <results>
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with wilcard in middle" name="Test Find-PSResource for Script.not find resource and throw exception with incorrectly formatted version such as version with wilcard in middle" time="0.3056" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with wilcard at start" name="Test Find-PSResource for Script.not find resource and throw exception with incorrectly formatted version such as version with wilcard at start" time="0.2692" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with wildcard at second digit" name="Test Find-PSResource for Script.not find resource and throw exception with incorrectly formatted version such as version with wildcard at second digit" time="0.2601" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with wildcard at third digit" name="Test Find-PSResource for Script.not find resource and throw exception with incorrectly formatted version such as version with wildcard at third digit" time="0.3195" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with wildcard at end" name="Test Find-PSResource for Script.not find resource and throw exception with incorrectly formatted version such as version with wildcard at end" time="0.302" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with missing digit in middle" name="Test Find-PSResource for Script.not find resource and throw exception with incorrectly formatted version such as version with missing digit in middle" time="0.9743" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with missing digit at end" name="Test Find-PSResource for Script.not find resource and throw exception with incorrectly formatted version such as version with missing digit at end" time="0.36" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource and throw exception with incorrectly formatted version such as version with more than 4 digits" name="Test Find-PSResource for Script.not find resource and throw exception with incorrectly formatted version such as version with more than 4 digits" time="0.3203" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Test Find-PSResource for Script.not find resource with incorrectly formatted version such as &lt;Description&gt;" executed="True" result="Success" success="True" time="0.7629" asserts="0" description="not find resource with incorrectly formatted version such as &lt;Description&gt;">
                <results>
                  <test-case description="not find resource with incorrectly formatted version such as exclusive version (1.5.0.0)" name="Test Find-PSResource for Script.not find resource with incorrectly formatted version such as exclusive version (1.5.0.0)" time="0.4914" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find resource with incorrectly formatted version such as version formatted with invalid delimiter" name="Test Find-PSResource for Script.not find resource with incorrectly formatted version such as version formatted with invalid delimiter" time="0.2715" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Test Find-PSResource for Script.not find script resource when given ModuleName to &lt;Reason&gt;" executed="True" result="Success" success="True" time="3.3886" asserts="0" description="not find script resource when given ModuleName to &lt;Reason&gt;">
                <results>
                  <test-case description="not find script resource when given ModuleName to validate version, exact match" name="Test Find-PSResource for Script.not find script resource when given ModuleName to validate version, exact match" time="0.3275" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find script resource when given ModuleName to validate version, exact match without bracket syntax" name="Test Find-PSResource for Script.not find script resource when given ModuleName to validate version, exact match without bracket syntax" time="0.2843" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find script resource when given ModuleName to validate version, exact range inclusive" name="Test Find-PSResource for Script.not find script resource when given ModuleName to validate version, exact range inclusive" time="0.2963" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find script resource when given ModuleName to validate version, exact range exclusive" name="Test Find-PSResource for Script.not find script resource when given ModuleName to validate version, exact range exclusive" time="0.2925" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find script resource when given ModuleName to validate version, minimum version exclusive" name="Test Find-PSResource for Script.not find script resource when given ModuleName to validate version, minimum version exclusive" time="0.2858" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find script resource when given ModuleName to validate version, minimum version inclusive" name="Test Find-PSResource for Script.not find script resource when given ModuleName to validate version, minimum version inclusive" time="0.3103" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find script resource when given ModuleName to validate version, maximum version exclusive" name="Test Find-PSResource for Script.not find script resource when given ModuleName to validate version, maximum version exclusive" time="0.3018" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find script resource when given ModuleName to validate version, maximum version inclusive" name="Test Find-PSResource for Script.not find script resource when given ModuleName to validate version, maximum version inclusive" time="0.9694" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="not find script resource when given ModuleName to validate version, mixed inclusive minimum and exclusive maximum version" name="Test Find-PSResource for Script.not find script resource when given ModuleName to validate version, mixed inclusive minimum and exclusive maximum version" time="0.3207" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="/mnt/c/Users/annavied/Documents/PowerShellGet/test/PSRepository.Tests.ps1" executed="True" result="Success" success="True" time="0.0628" asserts="0" description="/mnt/c/Users/annavied/Documents/PowerShellGet/test/PSRepository.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="/mnt/c/Users/annavied/Documents/PowerShellGet/test/PublishResource.Tests.ps1" executed="True" result="Success" success="True" time="0.0256" asserts="0" description="/mnt/c/Users/annavied/Documents/PowerShellGet/test/PublishResource.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="/mnt/c/Users/annavied/Documents/PowerShellGet/test/RequiredResource.Tests.ps1" executed="True" result="Success" success="True" time="0.0381" asserts="0" description="/mnt/c/Users/annavied/Documents/PowerShellGet/test/RequiredResource.Tests.ps1">
        <results />
      </test-suite>
    </results>
  </test-suite>
</test-results>